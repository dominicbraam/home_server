# Docker Compose file for running paperless from the docker container registry.
# This file contains everything paperless needs to run.
# Paperless supports amd64, arm and arm64 hardware.
#
# All compose files of paperless configure paperless in the following way:
#
# - Paperless is (re)started on system boot, if it was running before shutdown.
# - Docker volumes for storing data are managed by Docker.
# - Folders for importing and exporting files are created in the same directory
#   as this file and mounted to the correct folders inside the container.
# - Paperless listens on port 8000.
#
# In addition to that, this Docker Compose file adds the following optional
# configurations:
#
# - Instead of SQLite (default), PostgreSQL is used as the database server.
# - Apache Tika and Gotenberg servers are started with paperless and paperless
#   is configured to use these services. These provide support for consuming
#   Office documents (Word, Excel, Power Point and their LibreOffice counter-
#   parts.
#
# To install and update paperless with this file, do the following:
#
# - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'
#   and '.env' into a folder.
# - Run 'docker compose pull'.
# - Run 'docker compose run --rm webserver createsuperuser' to create a user.
# - Run 'docker compose up -d'.
#
# For more extensive installation and update instructions, refer to the
# documentation.

version: "3.4"
services:
  broker:
    image: docker.io/library/redis:7
    restart: ${RESTART_POLICY}
    networks:
      - proxy
    volumes:
      - ${PAPERLESS_REDIS_DATA}:/data

  db:
    image: docker.io/library/postgres:15
    restart: ${RESTART_POLICY}
    networks:
      - proxy
    volumes:
      - ${PAPERLESS_POSTGRES_DATA}:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${PAPERLESS_DB_NAME}
      POSTGRES_USER: ${PAPERLESS_DB_USER}
      POSTGRES_PASSWORD: ${PAPERLESS_DB_PASSWORD}

  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:2.3.3
    restart: ${RESTART_POLICY}
    networks:
      - proxy
    depends_on:
      - db
      - broker
      - gotenberg
      - tika
    ports:
      - 9981:8000
    volumes:
      - ${PAPERLESS_WEB_DATA}:/usr/src/paperless/data
      - ${PAPERLESS_WEB_MEDIA}:/usr/src/paperless/media
      - ${PAPERLESS_WEB_EXPORT}:/usr/src/paperless/export
      - ${PAPERLESS_WEB_CONSUME}:/usr/src/paperless/consume
        # env_file: ../.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
      PAPERLESS_TIKA_ENABLED: 1
      PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
      PAPERLESS_TIKA_ENDPOINT: http://tika:9998
      USERMAP_UID: ${PUID}
      USERMAP_GID: ${PGID}
      PAPERLESS_URL: https://${PAPERLESS_URL}
      PAPERLESS_SECRET_KEY: ${PAPERLESS_SECRET_KEY}
      PAPERLESS_TIME_ZONE: ${TZ}
      PAPERLESS_OCR_LANGUAGE: eng
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.entrypoints=http"
      - "traefik.http.routers.paperless.rule=Host(`${PAPERLESS_URL}`)"
      - "traefik.http.middlewares.paperless-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.paperless.middlewares=paperless-https-redirect"
      - "traefik.http.routers.paperless-secure.entrypoints=https"
      - "traefik.http.routers.paperless-secure.rule=Host(`${PAPERLESS_URL}`)"
      - "traefik.http.routers.paperless-secure.tls=true"
      - "traefik.http.routers.paperless-secure.service=paperless"
      - "traefik.http.services.paperless.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy"

  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.10
    restart: ${RESTART_POLICY}
    networks:
      - proxy

    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  tika:
    image: ghcr.io/paperless-ngx/tika:2.1.0-full
    restart: ${RESTART_POLICY}
    networks:
      - proxy

volumes:
  data:
  media:
  pgdata:
  redisdata:

networks:
  proxy:
    external: true
